/* =================== Always Encrypted =================== */

CREATE DATABASE MyEncryptedDB
GO

USE MyEncryptedDB
GO

-- Populate a table with sensitive data
CREATE TABLE Customer(
	CustomerId int IDENTITY(1,1) NOT NULL,
	Name varchar(20) NOT NULL,
	SSN varchar(20) NOT NULL,
	City varchar(20) NOT NULL
)

INSERT INTO Customer VALUES
 ('John Smith', '123-45-6789', 'New York'),
 ('Doug Nichols', '987-65-4321', 'Boston'),
 ('Joe Anonymous', 'n/a', 'Chicago')

-- View the sensitive data, unencrypted
SELECT * FROM Customer

-- Run case-insensitive queries
SELECT * FROM Customer WHERE Name = 'John Smith'
SELECT * FROM Customer WHERE Name = 'john smith'
SELECT * FROM Customer WHERE SSN = 'n/a'
SELECT * FROM Customer WHERE SSN = 'N/A'
SELECT * FROM Customer WHERE SSN >= '500-000-0000'

-- Discover Always Encrypted keys (none yet)
SELECT * FROM sys.column_master_keys
SELECT * FROM sys.column_encryption_keys 
SELECT * FROM sys.column_encryption_key_values

-- Discover columns protected by Always Encrypted (none yet)
SELECT * FROM sys.columns WHERE column_encryption_key_id IS NOT NULL

/*
	Use Always Encrypted Wizard in SSMS to encrypt sensitive columns (Tasks, Encrypt Columns..., about 15 sec)
		- Name (randomized)
		- SSN (deterministic)

	The Table now looks like this:

	CREATE TABLE Customer(
		CustomerId int IDENTITY(1,1) NOT NULL,
		Name varchar(20) ENCRYPTED WITH (
			COLUMN_ENCRYPTION_KEY = CEK_Auto1,
			ENCRYPTION_TYPE = Randomized,
			ALGORITHM = 'AEAD_AES_256_CBC_HMAC_SHA_256')
				NOT NULL,
		SSN varchar(20) ENCRYPTED WITH (
			COLUMN_ENCRYPTION_KEY = CEK_Auto1,
			ENCRYPTION_TYPE = Deterministic,
			ALGORITHM = 'AEAD_AES_256_CBC_HMAC_SHA_256')
				NOT NULL,
		City varchar(20) NOT NULL
	)
*/

-- Data appears encrypted
SELECT * FROM Customer

-- Can't run queries on encrypted columns
SELECT * FROM Customer WHERE Name = 'John Smith'
SELECT * FROM Customer WHERE SSN = 'n/a'

-- Discover Always Encrypted keys
SELECT * FROM sys.column_master_keys
SELECT * FROM sys.column_encryption_keys 
SELECT * FROM sys.column_encryption_key_values

-- Discover columns protected by Always Encrypted
SELECT
	[column] = c.name,
	c.column_encryption_key_id,
	cek = cek.name,
	column_encryption_key_database_name = ISNULL(column_encryption_key_database_name, DB_NAME()),
	encryption_type_desc,
	encryption_algorithm_name
FROM
	sys.columns AS c
	INNER JOIN sys.column_encryption_keys AS cek ON c.column_encryption_key_id = cek.column_encryption_key_id
WHERE
	c.column_encryption_key_id IS NOT NULL

/* Change database connection to use "column encryption setting=enabled" option */

-- Data appears decrypted
SELECT * FROM Customer

-- Still can't run queries on encrypted columns, or insert/update encrypted columns, with SSMS alone. These
-- actions must be parameterized, and issued by an ADO.NET client with "column encryption setting=enabled"
SELECT * FROM Customer WHERE Name = 'John Smith'
SELECT * FROM Customer WHERE SSN = 'n/a'

INSERT INTO Customer VALUES
 ('Steven Smith', '589-22-3690', 'Los Angeles')

/* Run ADO.NET client */

-- Show encrypted data generated by client (in clear text)
SELECT * FROM Customer

/* Change database connection not to use "column encryption setting=enabled" option */

-- Show encrypted data generated by client unreadable
SELECT * FROM Customer

-- Cleanup
--  delete database
--  delete certificate
